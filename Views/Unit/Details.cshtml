@using System.Globalization
@model ProjectName.Models.Unit

@{
    var numberFormat = CultureInfo.CurrentCulture;
}

<style>
    /* ===== بطاقة الوحدة ===== */
    .unit-card {
        display: flex;
        flex-direction: column;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
        background-color: #fff;
    }

    .unit-card img {
        width: 100%;
        height: 300px;
        object-fit: cover;
    }

    .unit-card-body {
        padding: 1rem;
    }

    .unit-card-body h3 {
        margin-bottom: 0.5rem;
    }

    .unit-card-body p {
        margin-bottom: 0.3rem;
    }

    .unit-card-body a {
        margin-right: 5px;
        margin-bottom: 5px;
    }

    /* ===== التقويم ===== */
    .calendar-wrapper {
        margin-top: 2rem;
        max-width: 420px;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 15px;
        background-color: #fdfdfd;
    }

    .month-navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .month-name {
        text-align: center;
        font-weight: bold;
        margin-bottom: 10px;
        font-size: 1.2rem;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
    }

    .calendar-grid div {
        text-align: center;
        padding: 8px 0;
        border-radius: 5px;
        font-size: 0.9rem;
        position: relative;
        cursor: default;
    }

    .calendar-header {
        font-weight: bold;
        color: #555;
    }

    .calendar-day.free {
        background-color: #e8f5e9;
        color: #2e7d32;
        transition: background 0.3s;
    }

    .calendar-day.free:hover {
        background-color: #c8e6c9;
    }

    .calendar-day.booked {
        background-color: #ef5350;
        color: #fff;
    }

    .tooltip {
        display: none;
        position: absolute;
        top: -25px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #333;
        color: #fff;
        font-size: 0.75rem;
        padding: 2px 6px;
        border-radius: 4px;
        white-space: nowrap;
        z-index: 10;
    }

    .calendar-day:hover .tooltip {
        display: block;
    }

    .month-inputs {
        display: flex;
        justify-content: center;
        gap: 5px;
        margin-bottom: 10px;
    }

    .month-inputs input {
        width: 70px;
        padding: 5px;
        font-size: 0.9rem;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .month-inputs button {
        padding: 5px 10px;
        font-size: 0.9rem;
    }
</style>

<div class="unit-card shadow">
    <img src="@Model.ImagePath" alt="@Model.Name">
    <div class="unit-card-body">
        <h3>@Model.Name</h3>
        <p class="text-muted">@Model.Description</p>
        <p><strong>السعر:</strong> @(String.Format(numberFormat, "{0:N2}", Model.PricePerNight)) ج.م / الليلة</p>
        <p><strong>السعة:</strong> @Model.Capacity فرد</p>
        <p>
            <span class="badge @(Model.IsAvailable ? "bg-success" : "bg-danger")">
                @(Model.IsAvailable ? "متاح" : "محجوز")
            </span>
        </p>
        <a href="/Booking/Create?unitId=@Model.UnitId" class="btn btn-success">📅 حجز الوحدة</a>
        <a href="/Expense/Create?unitId=@Model.UnitId" class="btn btn-warning">💰 إضافة مصروف</a>
        <a href="/Unit/Edit/@Model.UnitId" class="btn btn-primary">✏ تعديل الوحدة</a>
        <a href="/Unit/Index" class="btn btn-secondary">⬅ رجوع</a>
    </div>
</div>

<div class="calendar-wrapper">
    <h5>🗓 حالة المواعيد الشهرية</h5>

    <div class="month-navigation">
        <button class="btn btn-sm btn-primary" id="prevMonth">الشهر السابق</button>
        <span id="currentMonthYear"></span>
        <button class="btn btn-sm btn-primary" id="nextMonth">الشهر التالي</button>
    </div>

    <div class="month-inputs">
        <input type="number" id="monthInput" placeholder="الشهر" min="1" max="12" value="@DateTime.Now.Month" />
        <input type="number" id="yearInput" placeholder="السنة" min="2000" max="2100" value="@DateTime.Now.Year" />
        <button class="btn btn-sm btn-success" id="goToMonth">اذهب</button>
    </div>

    <div id="calendarMonth"></div>
</div>

<script>
    const bookings = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Bookings.Select(b => new { b.StartDate, b.EndDate, b.CustomerName })));

    let today = new Date();
    let currentMonth = today.getMonth();
    let currentYear = today.getFullYear();

    const daysOfWeek = ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"];

    function renderMonth(year, month) {
        const monthContainer = document.getElementById('calendarMonth');
        monthContainer.innerHTML = '';

        const monthName = document.createElement('div');
        monthName.classList.add('month-name');
        monthName.innerText = new Date(year, month).toLocaleString('ar-EG', { month: 'long', year: 'numeric' });
        monthContainer.appendChild(monthName);

        const calendarGrid = document.createElement('div');
        calendarGrid.classList.add('calendar-grid');

        // Days of week headers
        daysOfWeek.forEach(day => {
            const header = document.createElement('div');
            header.classList.add('calendar-header');
            header.innerText = day;
            calendarGrid.appendChild(header);
        });

        const firstDay = new Date(year, month, 1).getDay();
        const lastDate = new Date(year, month + 1, 0).getDate();

        // Empty slots before first day
        for (let i = 0; i < firstDay; i++) {
            calendarGrid.appendChild(document.createElement('div'));
        }

        for (let day = 1; day <= lastDate; day++) {
            const date = new Date(year, month, day);
            const div = document.createElement('div');
            div.classList.add('calendar-day');

            const booked = bookings.some(b => {
                const start = new Date(b.StartDate);
                const end = new Date(b.EndDate);
                return date >= start && date <= end;
            });

            if (booked) {
                div.classList.add('booked');
                const tooltip = document.createElement('span');
                tooltip.classList.add('tooltip');
                tooltip.innerText = bookings
                    .filter(b => {
                        const start = new Date(b.StartDate);
                        const end = new Date(b.EndDate);
                        return date >= start && date <= end;
                    })
                    .map(b => b.CustomerName)
                    .join(", ");
                div.appendChild(tooltip);
            } else {
                div.classList.add('free');
            }

            div.innerText = day;
            calendarGrid.appendChild(div);
        }

        monthContainer.appendChild(calendarGrid);
        document.getElementById('currentMonthYear').innerText = new Date(year, month).toLocaleString('ar-EG', { month: 'long', year: 'numeric' });
    }

    renderMonth(currentYear, currentMonth);

    document.getElementById('prevMonth').addEventListener('click', () => {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        renderMonth(currentYear, currentMonth);
    });

    document.getElementById('nextMonth').addEventListener('click', () => {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        renderMonth(currentYear, currentMonth);
    });

    document.getElementById('goToMonth').addEventListener('click', () => {
        const monthVal = parseInt(document.getElementById('monthInput').value) - 1;
        const yearVal = parseInt(document.getElementById('yearInput').value);

        if (!isNaN(monthVal) && monthVal >= 0 && monthVal <= 11 && !isNaN(yearVal)) {
            currentMonth = monthVal;
            currentYear = yearVal;
            renderMonth(currentYear, currentMonth);
        }
    });
</script>

@if (Model.Bookings != null && Model.Bookings.Any())
{
    <div class="mb-4">
        <h5>📅 الحجوزات</h5>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>العميل</th>
                    <th>من</th>
                    <th>إلى</th>
                    <th>السعر الإجمالي</th>
                    <th>إجراءات</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in Model.Bookings)
                {
                    <tr>
                        <td>@booking.CustomerName</td>
                        <td>@(booking.StartDate.ToString("yyyy-MM-dd"))</td>
                        <td>@(booking.EndDate.ToString("yyyy-MM-dd"))</td>
                        <td>@String.Format(numberFormat, "{0:N2}", booking.TotalPrice) ج.م</td>
                        <td>
                            <a href="/Booking/Details/@booking.BookingId" class="btn btn-info btn-sm mb-1">عرض التفاصيل</a>
                            <a href="/Booking/Edit/@booking.BookingId" class="btn btn-primary btn-sm mb-1">✏ تعديل</a>
                            <form asp-action="Delete" asp-controller="Booking" asp-route-id="@booking.BookingId" method="post" class="d-inline">
                                <button type="submit" class="btn btn-danger btn-sm mb-1" onclick="return confirm('هل أنت متأكد من حذف هذا الحجز؟');">🗑 حذف</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (Model.Expenses != null && Model.Expenses.Any())
{
    <div class="mb-4">
        <h5>💰 المصروفات</h5>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>الوصف</th>
                    <th>التاريخ</th>
                    <th>القيمة</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expense in Model.Expenses)
                {
                    <tr>
                        <td>@expense.Description</td>
                        <td>@(expense.Date.ToString("yyyy-MM-dd"))</td>
                        <td>@String.Format(numberFormat, "{0:N2}", expense.Amount) ج.م</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
